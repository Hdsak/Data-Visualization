#15-3. Молекулярное движение: измените программу rw_visual.py и  замените plt.scatter()
#вызовом plt.plot(). Чтобы смоделировать путь пыльцевого зерна на поверхности водяной
# капли, передайте значения rw.x_values и  rw.y_values и  включите аргумент linewidth.
#  Используйте 5000 точек вместо 50 000.
import matplotlib.pyplot as plt
from random_walk import RandomWalk

rw=RandomWalk()
rw.fill_walk()
plt.plot(rw.x_values,rw.y_values,linewidth=5)
plt.show()
# 15-4. Измененные случайные блуждания: в  классе RandomWalk значения x_step и  y_step
# генерируются по единому набору условий. Направление выбирается случайно из списка
# [1, -1], а расстояние — из списка [0, 1, 2, 3, 4]. Измените значения в этих списках и посмо-
# трите, что произойдет с общей формой диаграммы. Попробуйте применить расширенный
# список вариантов расстояния (например, от 0 до 8) или удалите –1 из списка направлений
# по оси x или y .

# 15-5. Рефакторинг: метод fill_walk() получился слишком длинным. Создайте новый метод
# с именем get_step(), который определяет расстояние и направление для каждого шага, по-
# сле чего вычисляет этот шаг. В результате метод fill_walk() должен содержать два вызова
# get_step():
# x_step = get_step()
# y_step = get_step()
# Рефакторинг сокращает размер fill_walk(), а метод становится более простым и понятным.
